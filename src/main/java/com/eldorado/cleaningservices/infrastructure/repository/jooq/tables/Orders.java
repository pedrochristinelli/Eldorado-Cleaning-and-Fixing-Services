/*
 * This file is generated by jOOQ.
 */
package com.eldorado.cleaningservices.infrastructure.repository.jooq.tables;


import com.eldorado.cleaningservices.infrastructure.repository.jooq.DefaultSchema;
import com.eldorado.cleaningservices.infrastructure.repository.jooq.tables.records.OrdersRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Orders extends TableImpl<OrdersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ORDERS</code>
     */
    public static final Orders ORDERS = new Orders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersRecord> getRecordType() {
        return OrdersRecord.class;
    }

    /**
     * The column <code>ORDERS.id</code>.
     */
    public final TableField<OrdersRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>ORDERS.customer_info</code>.
     */
    public final TableField<OrdersRecord, String> CUSTOMER_INFO = createField(DSL.name("customer_info"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ORDERS.purchase_date</code>.
     */
    public final TableField<OrdersRecord, LocalDate> PURCHASE_DATE = createField(DSL.name("purchase_date"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>ORDERS.service_pack_id</code>.
     */
    public final TableField<OrdersRecord, Integer> SERVICE_PACK_ID = createField(DSL.name("service_pack_id"), SQLDataType.INTEGER, this, "");

    private Orders(Name alias, Table<OrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Orders(Name alias, Table<OrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>ORDERS</code> table reference
     */
    public Orders(String alias) {
        this(DSL.name(alias), ORDERS);
    }

    /**
     * Create an aliased <code>ORDERS</code> table reference
     */
    public Orders(Name alias) {
        this(alias, ORDERS);
    }

    /**
     * Create a <code>ORDERS</code> table reference
     */
    public Orders() {
        this(DSL.name("ORDERS"), null);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<OrdersRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Orders.ORDERS, DSL.name("pk_ORDERS"), new TableField[] { Orders.ORDERS.ID }, true);
    }

    @Override
    public List<UniqueKey<OrdersRecord>> getKeys() {
        return Arrays.<UniqueKey<OrdersRecord>>asList(
              Internal.createUniqueKey(Orders.ORDERS, DSL.name("pk_ORDERS"), new TableField[] { Orders.ORDERS.ID }, true)
        );
    }

    @Override
    public Orders as(String alias) {
        return new Orders(DSL.name(alias), this);
    }

    @Override
    public Orders as(Name alias) {
        return new Orders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(String name) {
        return new Orders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(Name name) {
        return new Orders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, LocalDate, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
