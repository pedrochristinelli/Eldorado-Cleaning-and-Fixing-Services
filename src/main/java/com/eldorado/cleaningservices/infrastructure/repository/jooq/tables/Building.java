/*
 * This file is generated by jOOQ.
 */
package com.eldorado.cleaningservices.infrastructure.repository.jooq.tables;


import com.eldorado.cleaningservices.infrastructure.repository.jooq.DefaultSchema;
import com.eldorado.cleaningservices.infrastructure.repository.jooq.tables.records.BuildingRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Building extends TableImpl<BuildingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>BUILDING</code>
     */
    public static final Building BUILDING = new Building();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BuildingRecord> getRecordType() {
        return BuildingRecord.class;
    }

    /**
     * The column <code>BUILDING.id</code>.
     */
    public final TableField<BuildingRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>BUILDING.zipcode</code>.
     */
    public final TableField<BuildingRecord, String> ZIPCODE = createField(DSL.name("zipcode"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>BUILDING.latitude</code>.
     */
    public final TableField<BuildingRecord, String> LATITUDE = createField(DSL.name("latitude"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>BUILDING.longitude</code>.
     */
    public final TableField<BuildingRecord, String> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>BUILDING.created_date</code>.
     */
    public final TableField<BuildingRecord, LocalDate> CREATED_DATE = createField(DSL.name("created_date"), SQLDataType.LOCALDATE, this, "");

    private Building(Name alias, Table<BuildingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Building(Name alias, Table<BuildingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>BUILDING</code> table reference
     */
    public Building(String alias) {
        this(DSL.name(alias), BUILDING);
    }

    /**
     * Create an aliased <code>BUILDING</code> table reference
     */
    public Building(Name alias) {
        this(alias, BUILDING);
    }

    /**
     * Create a <code>BUILDING</code> table reference
     */
    public Building() {
        this(DSL.name("BUILDING"), null);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<BuildingRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Building.BUILDING, DSL.name("pk_BUILDING"), new TableField[] { Building.BUILDING.ID }, true);
    }

    @Override
    public List<UniqueKey<BuildingRecord>> getKeys() {
        return Arrays.<UniqueKey<BuildingRecord>>asList(
              Internal.createUniqueKey(Building.BUILDING, DSL.name("pk_BUILDING"), new TableField[] { Building.BUILDING.ID }, true)
        );
    }

    @Override
    public Building as(String alias) {
        return new Building(DSL.name(alias), this);
    }

    @Override
    public Building as(Name alias) {
        return new Building(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Building rename(String name) {
        return new Building(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Building rename(Name name) {
        return new Building(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, LocalDate> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
